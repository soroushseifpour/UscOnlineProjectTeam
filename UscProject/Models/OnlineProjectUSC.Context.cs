//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UscProject.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OnlineProjectUSCEntities : DbContext
    {
        public OnlineProjectUSCEntities()
            : base("name=OnlineProjectUSCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EmployerTB> EmployerTB { get; set; }
        public virtual DbSet<JobCategoryTB> JobCategoryTB { get; set; }
        public virtual DbSet<RoleTB> RoleTB { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<ResumeEmployeeTB> ResumeEmployeeTB { get; set; }
        public virtual DbSet<TheTotallPriceOfEach> TheTotallPriceOfEach { get; set; }
        public virtual DbSet<BoxCategory> BoxCategory { get; set; }
        public virtual DbSet<EmployeeTB> EmployeeTB { get; set; }
        public virtual DbSet<UserTB> UserTB { get; set; }
        public virtual DbSet<OrderDetailTB> OrderDetailTB { get; set; }
        public virtual DbSet<FormDetailTB> FormDetailTB { get; set; }
        public virtual DbSet<ResumeTB> ResumeTB { get; set; }
        public virtual DbSet<FormTB> FormTB { get; set; }
        public virtual DbSet<CommentTB> CommentTB { get; set; }
        public virtual DbSet<TheTop5Employee> TheTop5Employee { get; set; }
        public virtual DbSet<ContactTB> ContactTB { get; set; }
    
        public virtual ObjectResult<TheAmountOfSaleBaseYear_Result> TheAmountOfSaleBaseYear(Nullable<int> years, Nullable<int> iD)
        {
            var yearsParameter = years.HasValue ?
                new ObjectParameter("years", years) :
                new ObjectParameter("years", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TheAmountOfSaleBaseYear_Result>("TheAmountOfSaleBaseYear", yearsParameter, iDParameter);
        }
    
        public virtual ObjectResult<TheTotallFormsOfKarfarma_Result> TheTotallFormsOfKarfarma(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TheTotallFormsOfKarfarma_Result>("TheTotallFormsOfKarfarma", employeeidParameter);
        }
    
        public virtual ObjectResult<TheResumeForEmployees_Result> TheResumeForEmployees(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TheResumeForEmployees_Result>("TheResumeForEmployees", employeeidParameter);
        }
    
        public virtual ObjectResult<TheFormsOFEachResume_Result> TheFormsOFEachResume(Nullable<int> resumeid)
        {
            var resumeidParameter = resumeid.HasValue ?
                new ObjectParameter("resumeid", resumeid) :
                new ObjectParameter("resumeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TheFormsOFEachResume_Result>("TheFormsOFEachResume", resumeidParameter);
        }
    
        public virtual ObjectResult<TheFormsOFEachResumeFinal_Result> TheFormsOFEachResumeFinal(Nullable<int> resumeid)
        {
            var resumeidParameter = resumeid.HasValue ?
                new ObjectParameter("resumeid", resumeid) :
                new ObjectParameter("resumeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TheFormsOFEachResumeFinal_Result>("TheFormsOFEachResumeFinal", resumeidParameter);
        }
    
        public virtual ObjectResult<ResumesHasSentForEachKarFarm_Result> ResumesHasSentForEachKarFarm(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ResumesHasSentForEachKarFarm_Result>("ResumesHasSentForEachKarFarm", employeeidParameter);
        }
    
        public virtual ObjectResult<TheTotallFormsAfterTheLastOrderOfEmployee_Result> TheTotallFormsAfterTheLastOrderOfEmployee(Nullable<int> employeeid, Nullable<System.DateTime> today)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TheTotallFormsAfterTheLastOrderOfEmployee_Result>("TheTotallFormsAfterTheLastOrderOfEmployee", employeeidParameter, todayParameter);
        }
    
        public virtual ObjectResult<TheTotallFormsAfterTheLastOrderForEmployee_finallversion_Result> TheTotallFormsAfterTheLastOrderForEmployee_finallversion(Nullable<int> employeeid, Nullable<System.DateTime> today)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TheTotallFormsAfterTheLastOrderForEmployee_finallversion_Result>("TheTotallFormsAfterTheLastOrderForEmployee_finallversion", employeeidParameter, todayParameter);
        }
    }
}
